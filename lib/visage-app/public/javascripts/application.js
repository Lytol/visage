// Generated by CoffeeScript 1.6.3
(function() {
  var Dimension, DimensionCollectionView, DimensionView, FailureView, Graph, GraphCollection, GraphCollectionView, GraphView, Host, HostCollection, Metric, MetricCollection, Profile, ProfileView, SuccessView, Timeframe, TimeframeCollection, TimeframeCollectionView, TimeframeView;

  Dimension = Backbone.Model.extend({
    defaults: {
      checked: false,
      display: true
    }
  });

  Host = Dimension.extend({});

  Metric = Dimension.extend({});

  Graph = Backbone.Model.extend({
    url: function() {
      var finish, host, plugin, query, start, that;
      that = this;
      host = that.get('host');
      plugin = that.get('plugin');
      start = that.get('start');
      finish = that.get('finish');
      query = {};
      if (start) {
        query.start = start;
      }
      if (finish) {
        query.finish = finish;
      }
      query = Object.getLength(query) > 0 ? '?' + Object.toQueryString(query) : '';
      return "/data/" + host + "/" + plugin + query;
    },
    parse: function(response) {
      var data, host, instance, obj, plugin, that, _ref;
      that = this;
      host = response.host || that.get('host');
      _ref = (response.plugin || that.get('plugin')).split('/'), plugin = _ref[0], instance = _ref[1];
      data = response;
      obj = {};
      obj.data = data;
      obj.series = [];
      Object.each(data[host][plugin], function(instance, instanceName) {
        return Object.each(instance, function(metric, metricName) {
          var finish, interval, set, start;
          start = obj.start = metric.start;
          finish = obj.finish = metric.finish;
          interval = (finish - start) / metric.data.length;
          data = metric.data.map(function(value, index) {
            var x, y;
            x = (start + index * interval) * 1000;
            y = value;
            return [x, y];
          });
          set = {
            name: formatSeriesLabel([host, plugin, instanceName, metricName]),
            data: data,
            percentile95: metric.percentile_95
          };
          return obj.series.push(set);
        });
      });
      obj.series = obj.series.sort(function(a, b) {
        if (a.name < b.name) {
          return -1;
        }
        if (a.name > b.name) {
          return 1;
        }
        return 0;
      });
      return obj;
    }
  });

  Timeframe = Backbone.Model.extend({
    currentUnixTime: function() {
      var date;
      date = new Date;
      return parseInt(date.getTime() / 1000);
    },
    relativeUnixTimeTo: function(value) {
      var that;
      that = this;
      return that.currentUnixTime() - (Math.abs(value) * 3600);
    },
    roundedUnixTimeTo: function(value) {
      if (value < 0) {
        return new Date().decrement('month', Math.abs(value)).set('date', 1).clearTime().getTime() / 1000;
      }
      if (value > 0) {
        return new Date().increment('month', value).set('date', 1).clearTime().getTime() / 1000;
      }
      return new Date().set('date', 1).clearTime().getTime() / 1000;
    },
    toTimeAttributes: function() {
      var attrs, finish, start, that, unit;
      that = this;
      unit = that.get('unit');
      start = that.get('start');
      finish = that.get('finish');
      attrs = {};
      if (unit === 'hours') {
        if (start) {
          attrs.start = that.relativeUnixTimeTo(start);
        }
        if (finish) {
          attrs.finish = that.relativeUnixTimeTo(finish);
        }
      } else if (unit === 'months') {
        if (start) {
          attrs.start = that.relativeUnixTimeTo(start);
        }
        if (finish) {
          attrs.finish = that.relativeUnixTimeTo(finish);
        }
      }
      attrs.label = that.get('label');
      return attrs;
    }
  });

  Profile = Backbone.Model.extend({
    permalink: function() {
      return window.location.protocol + '//' + window.location.host + ("/profiles/" + this.id);
    },
    url: function(options) {
      var id;
      id = this.id;
      if (options && options.json === false) {
        if (id) {
          return "/profiles/" + id;
        } else {
          return '/profiles';
        }
      } else {
        if (id) {
          return "/profiles/" + id + ".json";
        } else {
          return '/profiles';
        }
      }
    },
    change: function(event) {
      if (!event.success && !event.error) {
        if (event.changes.graphs) {
          return this.dirty(true);
        }
      }
    },
    dirty: function(status) {
      if (status) {
        this.is_dirty = status;
      }
      return !!this.is_dirty;
    },
    isAnonymous: function() {
      return !!this.get('anonymous');
    },
    isNotAnonymous: function() {
      return !this.isAnonymous();
    },
    isAbsolute: function() {
      return this.get('timeframe') === 'absolute';
    },
    isRelative: function() {
      return !this.isAbsolute();
    },
    initialize: function() {
      var id;
      id = document.location.pathname.split('/')[2];
      if (id === 'new') {
        this.set('graphs', []);
        return this.set('timeframe', 'absolute');
      } else {
        return this.set('id', id);
      }
    },
    sync: function(method, original_model, options) {
      var graphs, model, simplified_graphs;
      if (['create', 'update'].contains(method)) {
        model = Object.clone(original_model);
        graphs = JSON.parse(JSON.stringify(original_model.get('graphs')));
        if (graphs.length > 0) {
          simplified_graphs = graphs.map(function(attrs) {
            return Object.subset(attrs, ['host', 'plugin', 'start', 'finish']);
          });
          model.set('graphs', simplified_graphs);
        }
      } else {
        model = original_model;
      }
      return Backbone.sync.apply(this, [method, model, options]);
    }
  });

  HostCollection = Backbone.Collection.extend({
    url: '/data',
    model: Host,
    parse: function(response) {
      var attrs;
      return attrs = response.hosts.map(function(host) {
        return {
          id: host
        };
      });
    },
    filter: function(term) {
      return this.each(function(item) {
        var error, match;
        try {
          match = !!item.get('id').match(term);
        } catch (_error) {
          error = _error;
          if (!error instanceof SyntaxError) {
            throw error;
          }
        }
        return item.set('display', match);
      });
    },
    selected: function() {
      return this.models.filter(function(model) {
        return model.get('checked') === true;
      });
    },
    for_api: function() {
      return this.selected().map(function(host) {
        return host.get('id');
      }).unique();
    }
  });

  MetricCollection = Backbone.Collection.extend({
    url: function() {
      return '/data/' + this.getConditions().join(',');
    },
    model: Metric,
    parse: function(response) {
      var attrs;
      attrs = response.metrics.map(function(metric) {
        return {
          id: metric
        };
      });
      return _.sortBy(attrs, function(attr) {
        return attr.id;
      });
    },
    filter: function(term) {
      return this.each(function(item) {
        var error, match;
        try {
          match = !!item.get('id').match(term);
        } catch (_error) {
          error = _error;
          if (!error instanceof SyntaxError) {
            throw error;
          }
        }
        return item.set('display', match);
      });
    },
    selected: function() {
      return this.models.filter(function(model) {
        return model.get('checked') === true;
      });
    },
    for_api: function() {
      var selected, selected_metrics;
      selected = {};
      selected_metrics = [];
      this.selected().each(function(metric) {
        var id, instance, plugin, _ref;
        id = metric.get('id');
        _ref = id.split('/'), plugin = _ref[0], instance = _ref[1];
        selected[plugin] || (selected[plugin] = []);
        return selected[plugin].include(instance);
      });
      Object.each(selected, function(item, key, object) {
        return selected_metrics.include("" + key + "/" + (item.join(',')));
      });
      return selected_metrics;
    },
    initialize: function() {
      return this.conditions = [];
    },
    setConditions: function(conditions) {
      return this.conditions = conditions;
    },
    getConditions: function() {
      return this.conditions;
    }
  });

  GraphCollection = Backbone.Collection.extend({
    model: Graph
  });

  TimeframeCollection = Backbone.Collection.extend({
    model: Timeframe
  });

  DimensionView = Backbone.View.extend({
    tagName: 'li',
    className: 'item',
    render: function() {
      var checkbox, id, label, name, that;
      that = this;
      id = name = this.model.id;
      checkbox = new Element('input', {
        'type': 'checkbox',
        'id': id,
        'class': "" + name + " checkbox",
        'checked': this.model.get('checked'),
        'events': {
          'change': function(event) {
            return that.model.set('checked', !that.model.get('checked'));
          }
        }
      });
      label = new Element('label', {
        'for': id,
        'html': id,
        'class': "" + name + " checkbox",
        'title': "" + name
      });
      $(this.el).grab(label.grab(checkbox));
      return $(this.el).addEvent('click', function(event) {
        if (event.target.tagName.toLowerCase() === 'li') {
          checkbox = event.target.getElement('input.checkbox');
          if (checkbox) {
            checkbox.checked = !checkbox.checked;
          }
          return that.model.set('checked', !that.model.get('checked'));
        }
      });
    }
  });

  DimensionCollectionView = Backbone.View.extend({
    tagName: 'ul',
    className: 'unstyled dimensioncollection',
    initialize: function() {
      var container, icon, linked, paper, search, that;
      that = this;
      container = $(that.options.container);
      if (linked = that.options.linked) {
        linked.on('change', that.filter, that);
      }
      icon = new Element('div', {
        'class': 'clear',
        'events': {
          'click': function(event) {
            var input, list, term;
            term = '';
            input = event.target.getParent('div.dimension').getElement('input.search');
            input.set('value', term);
            that.collection.filter(term);
            list = that.render().el;
            container.grab(list);
            icon = event.target.getParent('div.dimension').getElement('div.clear');
            return icon.setStyle('display', 'none');
          }
        }
      });
      paper = Raphael(icon, 26, 26);
      paper.path("M24.778,21.419 19.276,15.917 24.777,10.415 21.949,7.585 16.447,13.087 10.945,7.585 8.117,10.415 13.618,15.917 8.116,21.419 10.946,24.248 16.447,18.746 21.948,24.248z").attr({
        fill: "#aaa",
        stroke: "none"
      });
      search = new Element('input', {
        'type': 'text',
        'class': 'search',
        'autocomplete': 'off',
        'events': {
          'keyup': function(event) {
            var input, list, term;
            input = event.target;
            term = input.value;
            that.collection.filter(term);
            list = that.render().el;
            container.grab(list);
            if (term.length > 0) {
              return icon.setStyle('display', 'inline');
            } else {
              return icon.setStyle('display', 'none');
            }
          }
        }
      });
      container.grab(search);
      return container.grab(icon);
    },
    render: function() {
      var message, number_of_results, selectAll, that;
      that = this;
      that.el.empty();
      that.collection.each(function(model) {
        var view;
        view = new DimensionView({
          model: model
        });
        if (model.get('display')) {
          return that.el.grab(view.render());
        }
      });
      number_of_results = that.el.getChildren().length;
      if (number_of_results === 0) {
        message = new Element('li', {
          'html': 'No matches',
          'class': 'row'
        });
        that.el.grab(message);
      } else {
        selectAll = new Element('li', {
          'html': '&uarr; toggle all',
          'class': 'item toggle',
          'events': {
            'click': function(event) {
              var checkboxes;
              checkboxes = that.el.getElements('input.checkbox');
              return checkboxes.each(function(element) {
                element.fireEvent('change');
                return element.setProperty('checked', !element.getProperty('checked'));
              });
            }
          }
        });
        that.el.grab(selectAll);
      }
      return that;
    },
    filter: function() {
      var conditions, that;
      that = this;
      conditions = that.options.linked.selected().map(function(item) {
        return item.id;
      });
      if (conditions.length > 0) {
        that.collection.setConditions(conditions);
        return that.collection.fetch({
          success: function(collection) {
            var list;
            list = that.render().el;
            return that.options.container.grab(list);
          }
        });
      } else {
        that.collection.reset;
        return that.options.container.getElement('ul.dimensioncollection').empty();
      }
    }
  });

  ProfileView = Backbone.View.extend({
    tagName: 'form',
    className: 'profile',
    initialize: function() {
      var that;
      return that = this;
    }
  });

  Highcharts.setOptions({
    global: {
      useUTC: false
    }
  });

  GraphView = Backbone.View.extend({
    tagName: 'li',
    className: 'graph',
    title: function() {
      var host, plugin, that;
      that = this;
      plugin = that.model.get('plugin');
      host = that.model.get('host');
      if (that.options.title) {
        return that.options.title;
      } else {
        if (plugin.match(/^curl_json/)) {
          plugin = plugin.split('-')[1].replace(/(-|_)/, ' ');
        }
        return [plugin, 'on', host].join(' ');
      }
    },
    seriesMinMax: function() {
      var endpoints, max, min, series, that;
      that = this;
      series = that.model.get('series');
      endpoints = series.map(function(set) {
        var max, min, values;
        values = set.data.map(function(point) {
          return point[1];
        });
        min = values.min();
        max = values.max();
        return [min, max];
      });
      min = endpoints.map(function(min, max) {
        return min;
      }).min();
      max = endpoints.map(function(min, max) {
        return max;
      }).max();
      return [min, max];
    },
    render: function() {
      var element, max, min, series, that, title, _ref;
      that = this;
      element = that.el;
      series = that.model.get('series');
      title = that.title();
      _ref = that.seriesMinMax(), min = _ref[0], max = _ref[1];
      element.setStyle('height', 0);
      that.chart = new Highcharts.Chart({
        series: series,
        chart: {
          renderTo: element,
          type: 'line',
          marginRight: 0,
          marginBottom: 60,
          zoomType: 'xy',
          resetZoomButton: {
            theme: {
              fill: 'white',
              stroke: '#020508',
              r: 0,
              states: {
                hover: {
                  fill: '#020508',
                  style: {
                    color: 'white'
                  }
                }
              }
            }
          },
          width: 873,
          height: 350,
          plotBorderWidth: 1,
          plotBorderColor: '#020508',
          events: {},
          style: {
            'margin': 'auto',
            'font-family': "'Helvetica Neue', Helvetica, Arial, sans-serif"
          }
        },
        title: {
          text: title,
          style: {
            'fontSize': '18px',
            'fontWeight': 'bold',
            'color': '#333333',
            'font-family': 'Bitstream Vera Sans, Helvetica Neue, sans-serif'
          }
        },
        colors: ['#1F78B4', '#33A02C', '#E31A1C', '#FF7F00', '#6A3D9A', '#A6CEE3', '#B2DF8A', '#FB9A99', '#FDBF6F', '#CAB2D6', '#FFFF99'],
        xAxis: {
          lineWidth: 0,
          minPadding: 0.012,
          maxPadding: 0.012,
          tickLength: 5,
          tickColor: "#020508",
          startOnTick: false,
          endOnTick: false,
          gridLineWidth: 0,
          tickPixelInterval: 150,
          labels: {
            style: {
              color: '#000'
            }
          },
          title: {
            text: null
          },
          type: 'datetime',
          dateTimeLabelFormats: {
            second: '%H:%M:%S',
            minute: '%H:%M',
            hour: '%H:%M',
            day: '%d/%m',
            week: '%d/%m',
            month: '%m/%Y',
            year: '%Y'
          }
        },
        yAxis: {
          lineWidth: 0,
          minPadding: 0.05,
          maxPadding: 0.05,
          tickWidth: 1,
          tickColor: '#020508',
          startOnTick: false,
          endOnTick: false,
          gridLineWidth: 0,
          title: {
            text: null
          },
          labels: {
            style: {
              color: '#000'
            },
            formatter: function() {
              return formatValue(this.value, {
                'precision': 1,
                'min': min,
                'max': max
              });
            }
          }
        },
        plotOptions: {
          series: {
            shadow: false,
            lineWidth: 1,
            marker: {
              enabled: false,
              states: {
                hover: {
                  enabled: true,
                  radius: 4
                }
              }
            },
            states: {
              hover: {
                enabled: true,
                lineWidth: 1
              }
            }
          }
        },
        tooltip: {
          animation: false,
          shadow: false,
          shared: true,
          useHTML: true,
          formatter: function() {
            var options, s;
            options = {
              'precision': 1,
              'min': min,
              'max': max
            };
            s = '';
            s += '<small>';
            s += "<span style='font-weight: bold'>Time:</span> ";
            s += formatDate(this.points[0].key);
            s += '</small>';
            s += '<table>';
            this.points.each(function(point, index) {
              s += "<tr>";
              s += "<td style='color: " + point.series.color + "'>" + point.series.name + ": </td>";
              s += "<td style='text-align: left'>" + formatValue(point.y, options) + "</td>";
              return s += "</tr>";
            });
            return s += '</table>';
          }
        },
        legend: {
          layout: 'horizontal',
          align: 'center',
          verticalAlign: 'top',
          y: 320,
          borderWidth: 0,
          floating: true,
          itemStyle: {
            cursor: 'pointer',
            color: '#1a1a1a'
          },
          itemHoverStyle: {
            color: '#111'
          }
        },
        credits: {
          enabled: false
        }
      });
      element.tween('height', 376);
      return element;
    }
  });

  SuccessView = "<form id='share' class='share'>  <div class='row'>    Share this profile of graphs with others:  </div>  <div class='row permalink'>    <a href='{{model.permalink}}' target='_profile_{{model.id}}'>{{model.permalink}}</a>  </div>  <hr>  <div class='row'>    <label>Timeframe</label>    <p>      <input id='profile-timeframe-absolute' name='profile[timeframe]' class='radio' type='radio' value='absolute' {{#if model.isAbsolute}}checked{{/if}}/>      <label for='profile-timeframe-absolute' class='radio'>Absolute</label>      - view the time as currently displayed on the graphs (<em>Start: {{timeframe.start}}</em>).    </p>    <p>      <input id='profile-timeframe-relative' name='profile[timeframe]' class='radio' type='radio' value='{{ timeframe.label }}'{{#if model.isRelative}}checked{{/if}}/>      <label for='profile-timeframe-relative' class='radio'>Relative</label>      - view the time as a sliding window of &quot;{{ timeframe.label }}&quot;.    </p>  </div>  <hr/>  <div class='row question'>    <input id='profile-anonymous' name='profile[anonymous]' class='checkbox' type='checkbox' {{#model.isNotAnonymous}}checked=true{{/model.isNotAnonymous}} value='false'>    <label for='profile-anonymous'>Name this profile</label>    <p>Naming a profile is helpful if you need to refer back to a collection of graphs.</p>    <p>If you don't name the profile, you can still access it via the link above.</p>  </div>  <hr class='named'/>  <div class='row text named'>    <label for='profile-name'>Profile name</label>    <input id='profile-name' name='profile[name]' class='text' type='text' value='{{model.name}}'>  </div>  <hr class='named'/>  <div class='row text named'>    <label for='profile-tags'>Tags<span class='tip'> (comma separated)</label>    <input id='profile-tags' tags='profile[tags]' class='text' type='text' value='{{model.tags}}'>  </div></form>";

  FailureView = "<div id='errors'>\n  {{#each model}}\n  <div class='error message'><strong>Error:</strong> {{this}}</div>\n  {{/each}}\n</div>";

  GraphCollectionView = Backbone.View.extend({
    tagName: 'div',
    className: 'graph',
    views: [],
    initialize: function() {
      var element, shareToggler, that;
      that = this;
      element = that.el;
      that.sortable = new Sortables(element, {
        handle: 'div.action.move',
        opacity: 0.3,
        clone: true,
        revert: {
          duration: 500,
          transition: 'back:out'
        }
      });
      shareToggler = $('share-toggler');
      return shareToggler.addEvent('click', (function() {
        var current, profile;
        current = Backbone.history.fragment.toString();
        profile = window.profile;
        switch (false) {
          case !profile.isNew():
            profile.set({
              anonymous: true
            });
            return profile.save({}, {
              success: (function(profile, response, options) {
                window.Application.navigate("profiles/" + profile.id, {
                  trigger: true
                });
                return this.displayShareModal();
              }).bind(this),
              error: (function(model, xhr, options) {
                var errors, response;
                response = JSON.parse(xhr.responseText);
                errors = [];
                Object.each(response.errors, (function(item, key, object) {
                  return item.each(function(message) {
                    return errors.include("" + (key.capitalize()) + " " + message);
                  });
                }));
                return this.displayShareModal({
                  template: 'failure',
                  model: errors
                });
              }).bind(this)
            });
          case !(profile.dirty() && profile.isAnonymous()):
            window.profile = profile = profile.clone();
            profile.unset('id');
            return profile.save({}, {
              success: (function(profile, response, options) {
                window.Application.navigate("profiles/" + profile.id, {
                  trigger: true
                });
                return this.displayShareModal();
              }).bind(this),
              error: (function(model, xhr, options) {
                return console.log(model, xhr, options);
              }).bind(this)
            });
          case !(profile.dirty() && profile.isNotAnonymous()):
            return profile.save({}, {
              success: (function(profile, response, options) {
                return this.displayShareModal();
              }).bind(this),
              error: (function(model, xhr, options) {
                return console.log(model, xhr, options);
              }).bind(this)
            });
          default:
            return this.displayShareModal();
        }
      }).bind(this));
    },
    render: function() {
      var that;
      that = this;
      that.collection.each(function(model) {
        var graph, view;
        if (!model.get('rendered')) {
          view = new GraphView({
            model: model
          });
          that.views.include(view);
          graph = view.render();
          that.el.grab(graph);
          model.set('rendered', true);
          return that.sortable.addItems(view.el);
        }
      });
      return that;
    },
    displayShareModal: function(options) {
      var context, html, modal, source, template, timeframe;
      if (options == null) {
        options = {};
      }
      options.template || (options.template = 'success');
      options.model || (options.model = window.profile);
      modal = new LightFace({
        width: 600,
        draggable: true,
        title: 'Share profile',
        content: "<img src='/images/loader.gif'/>",
        buttons: [
          {
            title: 'Delete',
            color: 'red',
            event: function() {
              var destroy;
              destroy = confirm('Are you sure you want to delete this profile?');
              if (destroy) {
                return window.profile.destroy({
                  success: function(model, response) {
                    return window.location = '/profiles';
                  }
                });
              }
            }
          }, {
            title: "Close",
            color: 'blue',
            event: function() {
              return this.close();
            }
          }, {
            title: 'Save',
            color: 'green',
            event: function() {
              var form;
              form = this.messageBox.getElementById('share');
              form.set('send', {
                url: window.profile.url({
                  json: false
                }),
                onSuccess: (function(responseText, responseXML) {
                  return this.close();
                }).bind(this)
              });
              return form.send();
            }
          }
        ],
        resetOnScroll: true
      });
      ['delete', 'save', 'close'].each(function(title) {
        modal.showButton(title.capitalize()).set('id', "share-" + title);
        modal.showButton(title.capitalize()).set('class', 'action');
        return modal.showButton(title.capitalize()).getParent().set('id', "share-" + title + "-label");
      });
      modal.open();
      source = eval(options.template.capitalize() + 'View');
      template = Handlebars.compile(source);
      timeframe = JSON.parse(Cookie.read('timeframe'));
      timeframe.start = new Date(timeframe.start * 1000).format("%Y/%m/%d at %H:%M");
      timeframe.finish = new Date(timeframe.finish * 1000);
      context = {
        model: options.model,
        timeframe: timeframe
      };
      html = template(context);
      modal.messageBox.set('html', html);
      switch (options.template) {
        case 'success':
          if (window.profile.get('anonymous')) {
            modal.messageBox.getElements('.named').each(function(element) {
              return element.hide();
            });
          }
          return modal.messageBox.getElementById('profile-anonymous').addEvent('click', function(event) {
            return modal.messageBox.getElements('.named').each(function(element) {
              return element.toggle();
            });
          });
        case 'failure':
          return ['delete', 'save'].each(function(title) {
            return modal.showButton(title.capitalize()).getParent().dispose();
          });
      }
    }
  });

  TimeframeView = Backbone.View.extend({
    tagName: 'li',
    className: 'timeframe',
    selected: false,
    render: function() {
      var that;
      that = this;
      that.el.set('html', this.model.get('label'));
      if (that.model.get('selected')) {
        that.el.addClass('selected');
      }
      that.el.addEvent('click', function() {
        var attrs, label;
        label = $('timeframe-label');
        label.set('html', that.model.get('label'));
        $('timeframes').fade('out');
        that.el.getParent('ul').getElements('li').each(function(el) {
          return el.removeClass('selected');
        });
        that.el.toggleClass('selected');
        attrs = that.model.toTimeAttributes();
        Cookie.write('timeframe', JSON.encode(attrs));
        return window.graphs.models.each(function(graph) {
          graph.set(attrs);
          return graph.fetch({
            success: function(model, response) {
              return window.graphsView.views.each(function(view) {
                view.model.get('series').each(function(series, index) {
                  return view.chart.series[index].setData(series.data, false);
                });
                return view.chart.redraw();
              });
            }
          });
        });
      });
      return that;
    }
  });

  TimeframeCollectionView = Backbone.View.extend({
    tagName: 'ul',
    className: 'timeframe',
    initialize: function() {
      var label, that, timeframe, toggler;
      that = this;
      toggler = $('timeframe-toggler');
      toggler.addEvent('click', function() {
        return that.el.fade('toggle');
      });
      timeframe = JSON.decode(Cookie.read('timeframe'));
      if (timeframe && timeframe.label) {
        label = $('timeframe-label');
        return label.set('html', timeframe.label);
      }
    },
    default_timeframe: function() {
      var that;
      that = this;
      return that.collection.find(function(model) {
        return model.get('default');
      });
    },
    selected_timeframe: function() {
      var that;
      that = this;
      return that.collection.find(function(model) {
        return model.get('selected');
      });
    },
    render: function() {
      var selected, that, timeframe;
      that = this;
      that.el.empty();
      timeframe = JSON.decode(Cookie.read('timeframe'));
      selected = false;
      return that.collection.each(function(model) {
        var view;
        if (!selected) {
          switch (false) {
            case model !== that.selected_timeframe():
              that.setTimeframe(model);
              selected = true;
              break;
            case !(timeframe && timeframe.label === model.get('label')):
              that.setTimeframe(model);
              selected = true;
          }
        }
        view = new TimeframeView({
          model: model
        });
        return that.el.grab(view.render().el);
      });
    },
    setTimeframe: function(model) {
      var label;
      model.set('selected', true);
      label = $('timeframe-label');
      return label.set('html', model.get('label'));
    }
  });

  window.addEvent('domready', function() {
    var Workspace, attributes, button, hosts, hostsContainer, hostsView, metrics, metricsContainer, metricsView, timeframes, timeframesView;
    Workspace = Backbone.Router.extend({
      routes: {
        'profile/new': 'profile',
        'profile/:id': 'profile'
      }
    });
    window.Application = new Workspace();
    Backbone.history.start({
      pushState: true
    });
    hostsContainer = $('hosts');
    hosts = new HostCollection;
    hostsView = new DimensionCollectionView({
      collection: hosts,
      container: hostsContainer
    });
    hosts.fetch({
      success: function(collection) {
        var list;
        list = hostsView.render().el;
        return hostsContainer.grab(list);
      }
    });
    metricsContainer = $('metrics');
    metrics = new MetricCollection;
    metricsView = new DimensionCollectionView({
      collection: metrics,
      container: metricsContainer,
      linked: hosts
    });
    window.graphsContainer = $('graphs');
    window.graphs = new GraphCollection;
    window.graphsView = new GraphCollectionView({
      el: window.graphsContainer,
      collection: window.graphs
    });
    window.profile = new Profile();
    if (!window.profile.isNew()) {
      window.profile.fetch({
        success: function(model) {
          var selected, time_attributes, timeframe;
          timeframe = model.get('timeframe');
          timeframesView.collection.each(function(timeframe) {
            return timeframe.set('selected', false);
          });
          if (timeframe === 'absolute') {
            timeframesView.collection.add({
              label: 'As specified by profile',
              selected: true
            }, {
              at: 0
            });
            timeframesView.render();
          } else {
            selected = timeframesView.collection.find(function(entry) {
              return entry.get('label') === timeframe;
            });
            selected.set('selected', true);
            timeframesView.render();
            time_attributes = selected.toTimeAttributes();
          }
          return model.get('graphs').each(function(attributes) {
            var graph;
            if (timeframe !== 'absolute') {
              attributes.start = time_attributes.start;
              attributes.finish = time_attributes.finish;
            }
            graph = new Graph(attributes);
            return graph.fetch({
              success: function(model, response) {
                window.graphs.add(graph);
                return window.graphsView.render().el;
              }
            });
          });
        }
      });
    }
    button = new Element('a', {
      'html': '<i class="icon-plus icon-white"></i> Add graphs',
      'class': 'btn btn-success',
      'data-toggle': 'dropdown',
      'events': {
        'click': function(event) {
          return hosts.for_api().each(function(host) {
            var builder;
            metrics.for_api().each(function(metric) {
              var attributes, graph, timeframe;
              attributes = {
                host: host,
                plugin: metric
              };
              timeframe = JSON.decode(Cookie.read('timeframe'));
              attributes = Object.merge(attributes, timeframe);
              graph = new Graph(attributes);
              return graph.fetch({
                success: function(model, response, options) {
                  var graphs;
                  graphs = JSON.parse(JSON.stringify(window.profile.get('graphs')));
                  graphs.push(graph.attributes);
                  window.profile.set('graphs', graphs);
                  window.graphs.add(graph);
                  return window.graphsView.render().el;
                },
                error: function(model, response, options) {
                  return console.log('error', model, response, options);
                }
              });
            });
            builder = $('builder');
            return builder.tween('padding-top', 24).get('tween').chain(function() {
              return builder.setStyle('border-top', '1px dotted #aaa');
            });
          });
        }
      }
    });
    $('display').grab(button);
    timeframes = new TimeframeCollection;
    timeframes.add([
      {
        label: 'last 1 hour',
        start: -1,
        finish: 0,
        unit: 'hours',
        'default': true
      }, {
        label: 'last 2 hours',
        start: -2,
        finish: 0,
        unit: 'hours'
      }, {
        label: 'last 6 hours',
        start: -6,
        finish: 0,
        unit: 'hours'
      }, {
        label: 'last 12 hours',
        start: -12,
        finish: 0,
        unit: 'hours'
      }, {
        label: 'last 24 hours',
        start: -24,
        finish: 0,
        unit: 'hours'
      }, {
        label: 'last 3 days',
        start: -72,
        finish: 0,
        unit: 'hours'
      }, {
        label: 'last 7 days',
        start: -168,
        finish: 0,
        unit: 'hours'
      }, {
        label: 'last 2 weeks',
        start: -336,
        finish: 0,
        unit: 'hours'
      }, {
        label: 'last 1 month',
        start: -774,
        finish: 0,
        unit: 'hours'
      }, {
        label: 'last 3 months',
        start: -2322,
        finish: 0,
        unit: 'hours'
      }, {
        label: 'last 6 months',
        start: -4368,
        finish: 0,
        unit: 'hours'
      }, {
        label: 'last 1 year',
        start: -8760,
        finish: 0,
        unit: 'hours'
      }, {
        label: 'last 2 years',
        start: -17520,
        finish: 0,
        unit: 'hours'
      }, {
        label: 'current month',
        start: 0,
        finish: 1,
        unit: 'months'
      }, {
        label: 'previous month',
        start: -1,
        finish: 0,
        unit: 'months'
      }, {
        label: 'two months ago',
        start: -2,
        finish: -1,
        unit: 'months'
      }, {
        label: 'three months ago',
        start: -3,
        finish: -2,
        unit: 'months'
      }
    ]);
    if (!Cookie.read('timeframe')) {
      attributes = timeframes.find(function(model) {
        return model.get('default');
      }).toTimeAttributes();
      Cookie.write('timeframe', JSON.encode(attributes));
    }
    timeframesView = new TimeframeCollectionView({
      collection: timeframes,
      el: $('timeframes')
    });
    return timeframesView.render();
  });

}).call(this);
